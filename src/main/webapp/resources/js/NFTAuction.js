//블록체인 연결
console.log('starting...');

//web3 = new Web3(new Web3.providers.HttpProvider('HTTP://127.0.0.1:8545')); // 메타마스크 연결

if (typeof web3 !== 'undefined') {
        // Mist/MetaMask의 프로바이더 사용
        web3 = new Web3(window.web3.currentProvider);
        //alert('web3가 연결되었습니다.');
    } else {
        // 사용자가 Metamask를 설치하지 않은 경우에 대해 처리
        // 사용자들에게 Metamask를 설치하라는 등의 메세지를 보여줄 것
        web3 = new Web3(new Web3.providers.HttpProvider("http://127.0.0.1:8545"));
}

if (web3)
	console.log('connected');
else
	console.log('not connected');

//첫번째 계정 조회
let account;

// 여기에 우리가 만든 컨트랙트에 접근하는 방법을 제시한다:
/* abi generated by the compiler */
var abi = [
	{
		"constant": false,
		"inputs": [
			{
				"name": "_aucnNo",
				"type": "uint256"
			}
		],
		"name": "withdraw",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_aucnNo",
				"type": "uint256"
			}
		],
		"name": "auctionEnd",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_beneficiary",
				"type": "address"
			},
			{
				"name": "_aucnNo",
				"type": "uint256"
			},
			{
				"name": "highestBidder",
				"type": "address"
			},
			{
				"name": "highestBid",
				"type": "uint256"
			},
			{
				"name": "amount",
				"type": "uint256"
			},
			{
				"name": "ended",
				"type": "bool"
			}
		],
		"name": "NFTAuction",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_aucnNo",
				"type": "uint256"
			}
		],
		"name": "bid",
		"outputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"name": "AuctionMapping",
		"outputs": [
			{
				"name": "beneficiary",
				"type": "address"
			},
			{
				"name": "aucnNo",
				"type": "uint256"
			},
			{
				"name": "highestBidder",
				"type": "address"
			},
			{
				"name": "highestBid",
				"type": "uint256"
			},
			{
				"name": "amount",
				"type": "uint256"
			},
			{
				"name": "ended",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"name": "bidder",
				"type": "address"
			},
			{
				"indexed": false,
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "HighestBidIncreased",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"name": "winner",
				"type": "address"
			},
			{
				"indexed": false,
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "AuctionEnded",
		"type": "event"
	}
];

//var NFTAuctionContract = web3.eth.contract(abi)

var contractAddress = "0xE848Fe7124a368FA89BDdE33d75e3C0aAd1D50D9"; /* our contract address on Ethereum after deploying */

var NFTAuction = new web3.eth.Contract(abi, contractAddress);//NFTAuctionContract.at(contractAddress)
// `NFTAuction`는 우리 컨트랙트의 public 함수와 이벤트에 접근할 수 있다.

